#Snake, classic arcade game.
#MP - Mikayla Pleterski / AC - Ava Chen / YC - Yeseo Choi / MC - Magdalena Cudzich

from random import randrange #MP - randrange is a function that will be used to randomly place food for the snake in the game area
from turtle import * #MP - turtle is a graphics python library that allows for the editor to create images for the game and, in this game, control the animation of the snake's motion

from freegames import square, vector #MP - freegames is a library to provide functions that help the game format, and from freegames we are importing square (for drawing a square) and vector (for 2D motion)

food = vector(0, 0) #MP - Sets the food as a vector object and initializes it at the origin of the game space (0,0) 
snake = [vector(10, 0)] #MP - Sets the snake as a list of vector objects and initializes the first segment of the snake at (10,0)
aim = vector(0, -10) #MP - Sets aim as a vector object, meaning the direction in which the snake is moving, and initializes it at (0, -10), or moving downwards


def change(x, y):
    """Change snake direction.""" .
    aim.x = x #MP - updates motion in the x-direction
    aim.y = y #MP - updates motion in the y-direction
#MP - This function updates the direction of motion (the aim vector) when an arrow key is pressed. This function will later be called to assign the arrow keys to specific changes in motion

def inside(head):
    """Return True if head inside boundaries."""
    return -200 < head.x < 190 and -200 < head.y < 190


def move():
    """Move snake forward one segment."""
    head = snake[-1].copy()
    head.move(aim)

    if not inside(head) or head in snake:
        square(head.x, head.y, 9, 'red')
        update()
        return

    snake.append(head) #AC: adds the new position of the snake head to the snake list

#AC: check if the snake has eaten the food
    if head == food:         #AC: if the head position matches the food position, print the current length of the snake to the console. 
        print('Snake:', len(snake))
#AC: If the snake eats the food, spawn a new food item at a random location
        food.x = randrange(-15, 15) * 10  #AC: randomly generate a new x-coordinate for the food
        food.y = randrange(-15, 15) * 10  #AC: randomly generate a new y-coordinate for the food
    else:          #AC: if the snake hasn’t eaten the food, remove the tail (first element of the snake list)
        snake.pop(0)  #AC: removes the first element (tail) from the snake list, making the snake move forward.

    clear() #AC: clears the previous frame, allowing you to draw the updated positions of the snake and food

#AC: draw each segment of the snake
    for body in snake:  #AC: Loop through every part of the snake's body
        square(body.x, body.y, 9, 'black')   #AC: Draw each part of the snake as a small black square

#AC: draw the food
    square(food.x, food.y, 9, 'green')   #AC: Draw the food as a green square at its current coordinates
    update()    #AC: Update the screen to show the new positions of the snake and food
    ontimer(move, 100)  #AC: This schedules the ‘move’ function to be called after 100 milliseconds to create the animation loop


setup(420, 420, 370, 0)
hideturtle()
tracer(False)
listen()
onkey(lambda: change(10, 0), 'Right')
onkey(lambda: change(-10, 0), 'Left')
onkey(lambda: change(0, 10), 'Up')
onkey(lambda: change(0, -10), 'Down')
move()
done()
